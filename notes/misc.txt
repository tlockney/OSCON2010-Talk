
  Working with Hibernate   

import net.lockney._
import javax.persistence._
import scala.collection.JavaConversions._

val emf = Persistence.createEntityManagerFactory("hibernateExample")
val em = emf.createEntityManager

em.getTransaction.begin
em.persist(new User("Thomas","Lockney"))
em.getTransaction.commit

val users = em.createQuery("SELECT u FROM User u").getResultList().asInstanceOf[java.util.List[User]]

def printUser(x: Any) = x match {
  case x: User => println(x.getFullName)
  case _ => println("wasn't a user")
}

def printUsers(users: Iterable[User]) = { users.foreach(printUser(_)) }

printUsers(users)

val thomas = users.get(0)
val order = new Order(thomas)
em.getTransaction.begin 
em.persist(order) 
em.getTransaction.commit

val orderQuery = em.createQuery("SELECT o FROM Order o, User u WHERE o.user = u AND u.lastName = :lastName")
orderQuery.setParameter("lastName","Lockney")
val thomasOrder = orderQuery.getResultList.asInstanceOf[java.util.List[Order]].get(0)

val orderQuery2 = em.createNamedQuery("Order.byUserLastName")
orderQuery2.setParameter("lastName","Lockney")
val thomasOrder2 = orderQuery2.getResultList.asInstanceOf[java.util.List[Order]].get(0)



